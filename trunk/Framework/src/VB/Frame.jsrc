<?xml version="1.0" encoding="ISO-8859-1"?>
<SourceFile><Source><![CDATA[Option Explicit

Implements IJabacoControl
Implements MouseListener 
Implements MouseMotionListener
Implements FocusListener 

Event Click()
Event DblClick()
Event GotFocus()
Event LostFocus()
Event MouseEntered()
Event MouseExited() 
Event MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
Event MouseMove(Button As Integer, Shift As Integer, X As Single, Y As Single)
Event MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)

'Dim myScrollPane As New JScrollPane(Me)
Dim myImage As BufferedImage 
Dim myImagePath As String 
Dim RadioButtonGroup As New ButtonGroup
Dim AutoResizeVal As Boolean
Dim StartUpPositionVal As StartUpPositionConstants

Dim myBorderStyle As fmBorderStyle
Dim mySpecialEffect As fmSpecialEffect
Dim myBorderColor As Long
Dim myCaption As String
Dim myTag As String
Dim myMouseIcon As IResource 


' *** Variables for Anchor and resizing ***
Private myAnchor As AnchorStyles = AnchorStyles.vbTopLeft
Private mySavedWidth As Single
Private mySavedHeight As Single
Private mySavedLeft As Single
Private mySavedTop As Single
Private hostSavedWidth As Single
Private hostSavedHeight As Single
Private isResizeTriggerInitialized As Boolean = False
Private isLeftInitialized As Boolean = False
Private isTopInitialized As Boolean = False

' ******************************** INIT THIS CONTROL ********************************

Public Property Get Parent() As JPanel
   Parent = Base
End Property

Public Sub Class_Initialize()
   Call Parent.addFocusListener(Me)
   Call Parent.addMouseListener(Me)
   Call Parent.addMouseMotionListener(Me)
   Call Base.setBorder(New javax#swing#border#EtchedBorder)
   Call Base.setLayout(Null)
End Sub

' ******************************** DEFAULT FOCUS - EVENTS ********************************

Public Sub focusGained(arg2 As FocusEvent)
   Raiseevent GotFocus()
End Sub

Public Sub focusLost(arg2 As FocusEvent)
   Raiseevent LostFocus()
End Sub

' ******************************** DEFAULT MOUSE - EVENTS ********************************

Public Sub mouseMoved(e As MouseEvent) 
    RaiseEvent MouseMove(getVBMouseButton(e),getVBMouseShift(e),e.getX(),e.getY())
End Sub

Public Sub mouseDragged(e As MouseEvent) 
    RaiseEvent MouseMove(getVBMouseButton(e),getVBMouseShift(e),e.getX(),e.getY())
End Sub

Public Sub mousePressed(e As MouseEvent) 
    RaiseEvent MouseDown(getVBMouseButton(e),getVBMouseShift(e),e.getX(),e.getY())
End Sub

Public Sub mouseReleased(e As MouseEvent) 
   RaiseEvent MouseUp(getVBMouseButton(e),getVBMouseShift(e),e.getX(),e.getY())
   If (e.getX > 0 And e.getY > 0 And e.getX < Me.getWidth And e.getY < Me.getHeight) Then
      If e.getClickCount() Mod 2 = 0 Then
         RaiseEvent DblClick()
      Else
         RaiseEvent Click()
      End If
   End If
End Sub

Public Sub mouseClicked(e As MouseEvent) 
    'done by actionlistener
End Sub

Public Sub mouseEntered(e As MouseEvent) 
    RaiseEvent MouseEntered()
End Sub 

Public Sub mouseExited(e As MouseEvent) 
    RaiseEvent MouseExited()
End Sub

' ******************************** SPECIAL FUNCTIONS ********************************

Public Property Get BackStyle() As BackStyleConstants
   If Me.isOpaque() Then
      BackStyle = vbSolid
   Else
      BackStyle = vbTransparent
   End If
End Property

Public Property Let BackStyle(val As BackStyleConstants)
   Select Case val
      Case vbTransparent
         Parent.setOpaque(False) 
      Case vbSolid
         Parent.setOpaque(True) 
   End Select
End Property

Public Property Get Caption() As String
   Caption = myCaption
End Property

Public Property Let Caption(s As String)
   myCaption = s
   Call SetMyBorder()
End Property

Public Property Get BorderColor() As Long
   BorderColor = myBorderColor
End Property

Public Property Let BorderColor(v As Long)
   myBorderColor = v
End Property

Public Property Get BorderStyle() As fmBorderStyle
   BorderStyle = myBorderStyle
End Property

Public Property Let BorderStyle(v As fmBorderStyle)
   myBorderStyle = v
   Call SetMyBorder()
End Property

Public Property Get SpecialEffect() As fmSpecialEffect
   SpecialEffect = mySpecialEffect
End Property

Public Property Let SpecialEffect(v As fmSpecialEffect)
   mySpecialEffect = v
   Call SetMyBorder()
End Property

Private Sub SetMyBorder()
   Dim myBorder As Border
   myBorder = GetVBBorder(BorderStyle, SpecialEffect, BorderColor)
   If myCaption <> "" Then
      myBorder = BorderFactory.createTitledBorder(myBorder, myCaption, TitledBorder.LEFT, TitledBorder.TOP, getFont(), RGBToColor(ForeColor))
   End If
   Base.setBorder myBorder
   Call SetTitledBorderColor
End Sub

Private Sub SetTitledBorderColor()
   On Error Goto ERROUT
   Dim TitledBorder As javax#swing#border#TitledBorder 
   TitledBorder = Cast(Me.getBorder, javax#swing#border#TitledBorder)
   TitledBorder.setTitleColor Me.getForeground 
   TitledBorder.setTitleFont Me.getFont 
   ERROUT:
End Sub

Public Sub add(Component As java#awt#Component) 
   On Error Resume Next
   Dim MySelf As JPanel
   MySelf = Cast(Me, JPanel)
   MySelf.add Component

   If ( Component.getClass.getSuperclass.getName.equals("VB.CheckBox") ) Then
      Dim Component201 As VB#CheckBox = Cast(Component, VB#CheckBox)
      Component201.ResizeTriggerInit(Me.Width, Me.Height)
   ElseIf ( Component.getClass.getSuperclass.getName.equals("VB.ComboBox") ) Then
      Dim Component202 As VB#ComboBox = Cast(Component, VB#ComboBox)
      Component202.ResizeTriggerInit(Me.Width, Me.Height)
   ElseIf ( Component.getClass.getSuperclass.getName.equals("VB.CommandButton") ) Then
      Dim Component203 As VB#CommandButton = Cast(Component, VB#CommandButton)
      Component203.ResizeTriggerInit(Me.Width, Me.Height)
   ElseIf ( Component.getClass.getSuperclass.getName.equals("VB.Frame") ) Then
      Dim Component204 As VB#Frame = Cast(Component, VB#Frame)
      Component204.ResizeTriggerInit(Me.Width, Me.Height)
   ElseIf ( Component.getClass.getSuperclass.getName.equals("VB.JBGrid") ) Then
      Dim Component205 As VB#JBGrid = Cast(Component, VB#JBGrid)
      Component205.ResizeTriggerInit(Me.Width, Me.Height)
   ElseIf ( Component.getClass.getSuperclass.getName.equals("VB.Label") ) Then
      Dim Component206 As VB#Label = Cast(Component, VB#Label)
      Component206.ResizeTriggerInit(Me.Width, Me.Height)
   ElseIf ( Component.getClass.getSuperclass.getName.equals("VB.ListBox") ) Then
      Dim Component207 As VB#ListBox = Cast(Component, VB#ListBox)
      Component207.ResizeTriggerInit(Me.Width, Me.Height)
   ElseIf ( Component.getClass.getSuperclass.getName.equals("VB.OptionButton") ) Then
      Dim Component208 As VB#OptionButton = Cast(Component, VB#OptionButton)
      Component208.ResizeTriggerInit(Me.Width, Me.Height)
   ElseIf ( Component.getClass.getSuperclass.getName.equals("VB.PasswordField") ) Then
      Dim Component209 As VB#PasswordField = Cast(Component, VB#PasswordField)
      Component209.ResizeTriggerInit(Me.Width, Me.Height)
   ElseIf ( Component.getClass.getSuperclass.getName.equals("VB.PictureBox") ) Then
      Dim Component210 As VB#PictureBox = Cast(Component, VB#PictureBox)
      Component210.ResizeTriggerInit(Me.Width, Me.Height)
   ElseIf ( Component.getClass.getSuperclass.getName.equals("VB.ProgressBar") ) Then
      Dim Component211 As VB#ProgressBar = Cast(Component, VB#ProgressBar)
      Component211.ResizeTriggerInit(Me.Width, Me.Height)
   ElseIf ( Component.getClass.getSuperclass.getName.equals("VB.RichTextBox") ) Then
      Dim Component212 As VB#RichTextBox = Cast(Component, VB#RichTextBox)
      Component212.ResizeTriggerInit(Me.Width, Me.Height)
   ElseIf ( Component.getClass.getSuperclass.getName.equals("VB.ScrollBar") ) Then
      Dim Component213 As VB#ScrollBar = Cast(Component, VB#ScrollBar)
      Component213.ResizeTriggerInit(Me.Width, Me.Height)
   ElseIf ( Component.getClass.getSuperclass.getName.equals("VB.Shape") ) Then
      Dim Component214 As VB#Shape = Cast(Component, VB#Shape)
      Component214.ResizeTriggerInit(Me.Width, Me.Height)
   ElseIf ( Component.getClass.getSuperclass.getName.equals("VB.Slider") ) Then
      Dim Component215 As VB#Slider = Cast(Component, VB#Slider)
      Component215.ResizeTriggerInit(Me.Width, Me.Height)
   ElseIf ( Component.getClass.getSuperclass.getName.equals("VB.Spinner") ) Then
      Dim Component216 As VB#Spinner = Cast(Component, VB#Spinner)
      Component216.ResizeTriggerInit(Me.Width, Me.Height)
   ElseIf ( Component.getClass.getSuperclass.getName.equals("VB.SplitPane") ) Then
      Dim Component217 As VB#SplitPane = Cast(Component, VB#SplitPane)
      Component217.ResizeTriggerInit(Me.Width, Me.Height)
   ElseIf ( Component.getClass.getSuperclass.getName.equals("VB.TabStrip") ) Then
      Dim Component218 As VB#TabStrip = Cast(Component, VB#TabStrip)
      Component218.ResizeTriggerInit(Me.Width, Me.Height)
   ElseIf ( Component.getClass.getSuperclass.getName.equals("VB.TextBox") ) Then
      Dim Component219 As VB#TextBox = Cast(Component, VB#TextBox)
      Component219.ResizeTriggerInit(Me.Width, Me.Height)
   ElseIf ( Component.getClass.getSuperclass.getName.equals("VB.ToggleButton") ) Then
      Dim Component220 As VB#ToggleButton = Cast(Component, VB#ToggleButton)
      Component220.ResizeTriggerInit(Me.Width, Me.Height)
   ElseIf ( Component.getClass.getSuperclass.getName.equals("VB.TreeView") ) Then
      Dim Component221 As VB#TreeView = Cast(Component, VB#TreeView)
      Component221.ResizeTriggerInit(Me.Width, Me.Height)
   ElseIf ( Component.getClass.getSuperclass.getName.equals("VB.DirListBox") ) Then
      Dim Component222 As VB#DirListBox = Cast(Component, VB#DirListBox)
      Component222.ResizeTriggerInit(Me.Width, Me.Height)
   ElseIf ( Component.getClass.getSuperclass.getName.equals("VB.FileListBox") ) Then
      Dim Component223 As VB#FileListBox = Cast(Component, VB#FileListBox)
      Component223.ResizeTriggerInit(Me.Width, Me.Height)
   ElseIf ( Component.getClass.getSuperclass.getSuperclass.getName.equals("VB.Usercontrol") ) Then
      Dim Component224 As VB#Usercontrol = Cast(Component, VB#Usercontrol)
      Component224.ResizeTriggerInit(Me.Width, Me.Height)
   End If

   On Error Resume Next
   Dim ComponentCB As javax#swing#JCheckBox 
   ComponentCB = Cast(Component, javax#swing#JCheckBox )
   If ComponentCB <> Null Then
      Exit Sub
   End If
   Dim ComponentAB As AbstractButton
   ComponentAB = Cast(Component, AbstractButton)
   If ComponentAB <> Null Then
      RadioButtonGroup.add ComponentAB
   End If
End Sub




' ******************************** SAME IN ALL JABACO CONTROLS ********************************

Public Property Get FontName() As String 
   FontName = Parent.getFont.GetFamily()
End Property

Public Property Let FontName(val As String)
   Parent.setFont(New Font(val, IIF(FontBold, BOLD, 0) OR IIF(FontItalic, ITALIC, 0), VBFontSizeToJFontSize(FontSize)))
End Property

Public Property Get FontBold() As Boolean 
   FontBold = Parent.getFont.isBold()
End Property

Public Property Let FontBold(val As Boolean)
   Parent.setFont(New Font(FontName, IIF(val, BOLD, 0) OR IIF(FontItalic, ITALIC, 0), VBFontSizeToJFontSize(FontSize)))
End Property

Public Property Get FontItalic() As Boolean
   FontItalic = Parent.getFont.isItalic()
End Property

Public Property Let FontItalic(val As Boolean)
   Parent.setFont(New Font(FontName, IIF(FontBold, BOLD, 0) OR IIF(val, ITALIC, 0), VBFontSizeToJFontSize(FontSize)))
End Property

Public Property Get FontSize() As Integer 
   FontSize = (JFontSizeToVBFontSize(Font.getSize()))
End Property

Public Property Let FontSize(val As Integer)
   Parent.setFont(New Font(FontName, IIF(FontBold, BOLD, 0) Or IIF(FontItalic, ITALIC, 0), VBFontSizeToJFontSize(val)))
End Property

Public Property Get Font() As Font
   Font = Parent.getFont()
End Property

Public Property Get BackColor() As Long
   BackColor = ColortoRGB(Base.getBackground())
End Property

Public Property Let BackColor(v As Long)
   Base.setBackground(RGBtoColor(v))
End Property

Public Property Get ForeColor() As Long
   ForeColor = ColortoRGB(Base.getForeground())
End Property

Public Property Let ForeColor(v As Long)
    Base.setForeground(RGBtoColor(v))
    Call SetMyBorder()
End Property

Public Property Get Width() As Single
    Width = Me.getSize.Width
End Property

Public Property Let Width(v As Single)
    Me.setSize(v, Me.getSize.Height)
    AnchorResize()
End Property

Public Property Get Height() As Single
    Height = Me.getSize.Height
End Property

Public Property Let Height(v As Single)
    Me.setSize(Me.getSize.Width, v)
    AnchorResize()
End Property

Public Property Get Left() As Single
    Left = Me.getLocation.x
End Property

Public Property Let Left(v As Single)
    If isLeftInitialized = False Then
       mySavedLeft = v
       isLeftInitialized = True
    End If
    Me.setLocation(v, Me.getLocation.y)
End Property

Public Property Get Top() As Single
    Top = Me.getLocation.y
End Property

Public Property Let Top(v As Single)
    If isTopInitialized = False Then
       mySavedTop = v
       isTopInitialized = True
    End If
    Me.setLocation(Me.getLocation.x, v)
End Property

Public Property Get Anchor() AS AnchorStyles
   Anchor = myAnchor
End Property

Public Property Let Anchor(val As AnchorStyles)
   myAnchor = val
End Property

Public Function Move(Left As Single, Optional Top As Single = -1, Optional Width As Single = -1, Optional Height As Single = -1)
   Me.Left = Left
   If Top <> -1 Then Me.Top = Top
   If Width <> -1 Then Me.Width = Width
   If Height <> -1 Then Me.Height = Height
End Function

Public Property Get ToolTip() As String 
    ToolTip = Parent.getToolTipText()
End Property

Public Property Let ToolTip(v As String)
	If Len(v) = 0 Then 
	    Parent.setToolTipText(Null)
    Else
	    Parent.setToolTipText(v)
    End If
End Property

Public Property Get Enabled() As Boolean 
   Enabled = Base.isEnabled()
End Property

Public Property Let Enabled(v As Boolean)
   Call Base.setEnabled(v)
End Property

Public Property Get Visible() As Boolean 
    Visible = Base.isVisible()
End Property

Public Property Let Visible(v As Boolean)
    Base.setVisible v
End Property

Public Property Get Tag() As String 
   Tag = myTag
End Property

Public Property Let Tag(v As String)
   myTag = v
End Property

Public Property Get MousePointer() As MousePointerConstants
   MousePointer = JCursorToVBMousePointer(Parent.getCursor())
End Property

Public Property Let MousePointer(v As MousePointerConstants)
   Call Parent.setCursor(VBMousePointerToJCursor(v))
End Property

Public Property Get MouseIcon() As #IResource 
   MouseIcon = myMouseIcon
End Property

Public Property Let MouseIcon(v As #IResource)
   myMouseIcon = v
   Call Parent.setCursor(VBMouseIconToJCursor(v, Me))
End Property

Public Property Get CanGetFocus() As Boolean
   CanGetFocus = Parent.isFocusable
End Property

Public Property Let CanGetFocus(v As Boolean)
   Parent.setFocusable v
End Property

Public Sub SetFocus()
   Parent.requestFocus 
End Sub

Public Sub Refresh()
   Call Parent.invalidate()
   Call Parent.repaint(0, 0, 0, Me.Width, Me.Height)
End Sub

Public Sub ResizeTriggerInit(w As Single, h As Single)
   hostSavedWidth = w
   hostSavedHeight = h
   mySavedWidth = Me.Width
   mySavedHeight = Me.Height
   isResizeTriggerInitialized = True
End Sub

Public Sub ResizeTrigger(w As Single, h As Single)
   If isResizeTriggerInitialized = True And isLeftInitialized = True And isTopInitialized = True Then
      Select Case myAnchor And 12 ' horizontal re-allignment
        ' 12 in decimal = 1100 in binary. binary addition - eliminates Top and Bottom
      Case AnchorStyles.vbLeft
         ' do nothing
      Case AnchorStyles.vbRight
        Me.Left = w-hostSavedWidth+mySavedLeft
      Case AnchorStyles.vbLeftRight
        Me.Width = w-hostSavedWidth+mySavedWidth
      Case AnchorStyles.vbNone
        Me.Left = (w-mySavedWidth)/(hostSavedWidth-mySavedWidth)*mySavedLeft
      End Select

      Select Case myAnchor And 3 ' vertical re-allignment
        ' 3 in decimal = 0011 in binary. binary addition - eliminates Left and Right
      Case AnchorStyles.vbTop
         ' do nothing
      Case AnchorStyles.vbBottom
         Me.Top = h-hostSavedHeight+mySavedTop
      Case AnchorStyles.vbTopBottom
         Me.Height = h-hostSavedHeight+mySavedHeight
      Case AnchorStyles.vbNone
         Me.Top = (h-mySavedHeight)/(hostSavedHeight-mySavedHeight)*mySavedTop
      End Select
   End If
End Sub


Private Sub AnchorResize()
   Dim comp() As java#awt#Component
   Dim i As Integer
   comp = Me.getComponents()

   For i = 0 To Ubound(comp)
      If comp(i).getClass.getSuperclass.getName.equals("VB.CheckBox") Then
         Dim myCont01 As VB#CheckBox
         myCont01 = Cast(comp(i) , VB#CheckBox)
         myCont01.ResizeTrigger(Parent.getWidth, Parent.getHeight)
      ElseIf comp(i).getClass.getSuperclass.getName.equals("VB.ComboBox") Then
         Dim myCont02 As VB#ComboBox
         myCont02 = Cast(comp(i) , VB#ComboBox)
         myCont02.ResizeTrigger(Parent.getWidth, Parent.getHeight)
      ElseIf comp(i).getClass.getSuperclass.getName.equals("VB.CommandButton") Then
         Dim myCont03 As VB#CommandButton
         myCont03 = Cast(comp(i) , VB#CommandButton)
         myCont03.ResizeTrigger(Parent.getWidth, Parent.getHeight)
      ElseIf comp(i).getClass.getSuperclass.getName.equals("VB.Frame") Then
         Dim myCont04 As VB#Frame
         myCont04 = Cast(comp(i) , VB#Frame)
         myCont04.ResizeTrigger(Parent.getWidth, Parent.getHeight)
      ElseIf comp(i).getClass.getSuperclass.getName.equals("VB.JBGrid") Then
         Dim myCont05 As VB#JBGrid
         myCont05 = Cast(comp(i) , VB#JBGrid)
         myCont05.ResizeTrigger(Parent.getWidth, Parent.getHeight)
      ElseIf comp(i).getClass.getSuperclass.getName.equals("VB.Label") Then
         Dim myCont06 As VB#Label
         myCont06 = Cast(comp(i) , VB#Label)
         myCont06.ResizeTrigger(Parent.getWidth, Parent.getHeight)
      ElseIf comp(i).getClass.getSuperclass.getName.equals("VB.ListBox") Then
         Dim myCont07 As VB#ListBox
         myCont07 = Cast(comp(i) , VB#ListBox)
         myCont07.ResizeTrigger(Parent.getWidth, Parent.getHeight)
      ElseIf comp(i).getClass.getSuperclass.getName.equals("VB.OptionButton") Then
         Dim myCont08 As VB#OptionButton
         myCont08 = Cast(comp(i) , VB#OptionButton)
         myCont08.ResizeTrigger(Parent.getWidth, Parent.getHeight)
      ElseIf comp(i).getClass.getSuperclass.getName.equals("VB.PasswordField") Then
         Dim myCont09 As VB#PasswordField
         myCont09 = Cast(comp(i) , VB#PasswordField)
         myCont09.ResizeTrigger(Parent.getWidth, Parent.getHeight)
      ElseIf comp(i).getClass.getSuperclass.getName.equals("VB.PictureBox") Then
         Dim myCont10 As VB#PictureBox
         myCont10 = Cast(comp(i) , VB#PictureBox)
         myCont10.ResizeTrigger(Parent.getWidth, Parent.getHeight)
      ElseIf comp(i).getClass.getSuperclass.getName.equals("VB.ProgressBar") Then
         Dim myCont11 As VB#ProgressBar
         myCont11 = Cast(comp(i) , VB#ProgressBar)
         myCont11.ResizeTrigger(Parent.getWidth, Parent.getHeight)
      ElseIf comp(i).getClass.getSuperclass.getName.equals("VB.RichTextBox") Then
         Dim myCont12 As VB#RichTextBox
         myCont12 = Cast(comp(i) , VB#RichTextBox)
         myCont12.ResizeTrigger(Parent.getWidth, Parent.getHeight)
      ElseIf comp(i).getClass.getSuperclass.getName.equals("VB.ScrollBar") Then
         Dim myCont13 As VB#ScrollBar
         myCont13 = Cast(comp(i) , VB#ScrollBar)
         myCont13.ResizeTrigger(Parent.getWidth, Parent.getHeight)
      ElseIf comp(i).getClass.getSuperclass.getName.equals("VB.Shape") Then
         Dim myCont14 As VB#Shape
         myCont14 = Cast(comp(i) , VB#Shape)
         myCont14.ResizeTrigger(Parent.getWidth, Parent.getHeight)
      ElseIf comp(i).getClass.getSuperclass.getName.equals("VB.Slider") Then
         Dim myCont15 As VB#Slider
         myCont15 = Cast(comp(i) , VB#Slider)
         myCont15.ResizeTrigger(Parent.getWidth, Parent.getHeight)
      ElseIf comp(i).getClass.getSuperclass.getName.equals("VB.Spinner") Then
         Dim myCont16 As VB#Spinner
         myCont16 = Cast(comp(i) , VB#Spinner)
         myCont16.ResizeTrigger(Parent.getWidth, Parent.getHeight)
      ElseIf comp(i).getClass.getSuperclass.getName.equals("VB.SplitPane") Then
         Dim myCont17 As VB#SplitPane
         myCont17 = Cast(comp(i) , VB#SplitPane)
         myCont17.ResizeTrigger(Parent.getWidth, Parent.getHeight)
      ElseIf comp(i).getClass.getSuperclass.getName.equals("VB.TabStrip") Then
         Dim myCont18 As VB#TabStrip
         myCont18 = Cast(comp(i) , VB#TabStrip)
         myCont18.ResizeTrigger(Parent.getWidth, Parent.getHeight)
      ElseIf comp(i).getClass.getSuperclass.getName.equals("VB.TextBox") Then
         Dim myCont19 As VB#TextBox
         myCont19 = Cast(comp(i) , VB#TextBox)
         myCont19.ResizeTrigger(Parent.getWidth, Parent.getHeight)
      ElseIf comp(i).getClass.getSuperclass.getName.equals("VB.ToggleButton") Then
         Dim myCont20 As VB#ToggleButton
         myCont20 = Cast(comp(i) , VB#ToggleButton)
         myCont20.ResizeTrigger(Parent.getWidth, Parent.getHeight)
      ElseIf comp(i).getClass.getSuperclass.getName.equals("VB.TreeView") Then
         Dim myCont21 As VB#TreeView
         myCont21 = Cast(comp(i) , VB#TreeView)
         myCont21.ResizeTrigger(Parent.getWidth, Parent.getHeight)
      ElseIf comp(i).getClass.getSuperclass.getName.equals("VB.DirListBox") Then
         Dim myCont22 As VB#DirListBox
         myCont22 = Cast(comp(i) , VB#DirListBox)
         myCont22.ResizeTrigger(Parent.getWidth, Parent.getHeight)
      ElseIf comp(i).getClass.getSuperclass.getName.equals("VB.FileListBox") Then
         Dim myCont23 As VB#FileListBox
         myCont23 = Cast(comp(i) , VB#FileListBox)
         myCont23.ResizeTrigger(Parent.getWidth, Parent.getHeight)
      ElseIf comp(i).getClass.getSuperclass.getSuperclass.getName.equals("VB.Usercontrol") Then
         Dim myCont24 As VB#Usercontrol
         myCont24 = Cast(comp(i) , VB#Usercontrol)
         myCont24.ResizeTrigger(Parent.getWidth, Parent.getHeight)
      End If
   Next i
End Sub


]]></Source><Param Name="(Name)" Value="Frame"/><Param Name="(SuperClass)" Value="javax/swing/JPanel"/><Param Name="(Type)" Value="Class"/><Param Name="(Access)" Value="Public"/><Param Name="(NameSpace)" Value="VB"/></SourceFile>

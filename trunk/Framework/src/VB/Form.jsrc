<?xml version="1.0" encoding="ISO-8859-1"?>
<SourceFile><Source><![CDATA[Option Explicit
Implements IJabacoForm
Implements IJabacoContainer

Dim Withevents myContent As New PictureBox

Public Sub add(Component As java#awt#Component) 

   If ( Component.getClass.getSuperclass.getName.equals("VB.CheckBox") ) Then
      Dim Component201 As VB#CheckBox = Cast(Component, VB#CheckBox)
      Component201.ResizeTriggerInit(Me.Width, Me.Height)
   ElseIf ( Component.getClass.getSuperclass.getName.equals("VB.ComboBox") ) Then
      Dim Component202 As VB#ComboBox = Cast(Component, VB#ComboBox)
      Component202.ResizeTriggerInit(Me.Width, Me.Height)
   ElseIf ( Component.getClass.getSuperclass.getName.equals("VB.CommandButton") ) Then
      Dim Component203 As VB#CommandButton = Cast(Component, VB#CommandButton)
      Component203.ResizeTriggerInit(Me.Width, Me.Height)
   ElseIf ( Component.getClass.getSuperclass.getName.equals("VB.Frame") ) Then
      Dim Component204 As VB#Frame = Cast(Component, VB#Frame)
      Component204.ResizeTriggerInit(Me.Width, Me.Height)
   ElseIf ( Component.getClass.getSuperclass.getName.equals("VB.JBGrid") ) Then
      Dim Component205 As VB#JBGrid = Cast(Component, VB#JBGrid)
      Component205.ResizeTriggerInit(Me.Width, Me.Height)
   ElseIf ( Component.getClass.getSuperclass.getName.equals("VB.Label") ) Then
      Dim Component206 As VB#Label = Cast(Component, VB#Label)
      Component206.ResizeTriggerInit(Me.Width, Me.Height)
   ElseIf ( Component.getClass.getSuperclass.getName.equals("VB.ListBox") ) Then
      Dim Component207 As VB#ListBox = Cast(Component, VB#ListBox)
      Component207.ResizeTriggerInit(Me.Width, Me.Height)
   ElseIf ( Component.getClass.getSuperclass.getName.equals("VB.OptionButton") ) Then
      Dim Component208 As VB#OptionButton = Cast(Component, VB#OptionButton)
      Component208.ResizeTriggerInit(Me.Width, Me.Height)
   ElseIf ( Component.getClass.getSuperclass.getName.equals("VB.PasswordField") ) Then
      Dim Component209 As VB#PasswordField = Cast(Component, VB#PasswordField)
      Component209.ResizeTriggerInit(Me.Width, Me.Height)
   ElseIf ( Component.getClass.getSuperclass.getName.equals("VB.PictureBox") ) Then
      Dim Component210 As VB#PictureBox = Cast(Component, VB#PictureBox)
      Component210.ResizeTriggerInit(Me.Width, Me.Height)
   ElseIf ( Component.getClass.getSuperclass.getName.equals("VB.ProgressBar") ) Then
      Dim Component211 As VB#ProgressBar = Cast(Component, VB#ProgressBar)
      Component211.ResizeTriggerInit(Me.Width, Me.Height)
   ElseIf ( Component.getClass.getSuperclass.getName.equals("VB.RichTextBox") ) Then
      Dim Component212 As VB#RichTextBox = Cast(Component, VB#RichTextBox)
      Component212.ResizeTriggerInit(Me.Width, Me.Height)
   ElseIf ( Component.getClass.getSuperclass.getName.equals("VB.ScrollBar") ) Then
      Dim Component213 As VB#ScrollBar = Cast(Component, VB#ScrollBar)
      Component213.ResizeTriggerInit(Me.Width, Me.Height)
   ElseIf ( Component.getClass.getSuperclass.getName.equals("VB.Shape") ) Then
      Dim Component214 As VB#Shape = Cast(Component, VB#Shape)
      Component214.ResizeTriggerInit(Me.Width, Me.Height)
   ElseIf ( Component.getClass.getSuperclass.getName.equals("VB.Slider") ) Then
      Dim Component215 As VB#Slider = Cast(Component, VB#Slider)
      Component215.ResizeTriggerInit(Me.Width, Me.Height)
   ElseIf ( Component.getClass.getSuperclass.getName.equals("VB.Spinner") ) Then
      Dim Component216 As VB#Spinner = Cast(Component, VB#Spinner)
      Component216.ResizeTriggerInit(Me.Width, Me.Height)
   ElseIf ( Component.getClass.getSuperclass.getName.equals("VB.SplitPane") ) Then
      Dim Component217 As VB#SplitPane = Cast(Component, VB#SplitPane)
      Component217.ResizeTriggerInit(Me.Width, Me.Height)
   ElseIf ( Component.getClass.getSuperclass.getName.equals("VB.TabStrip") ) Then
      Dim Component218 As VB#TabStrip = Cast(Component, VB#TabStrip)
      Component218.ResizeTriggerInit(Me.Width, Me.Height)
   ElseIf ( Component.getClass.getSuperclass.getName.equals("VB.TextBox") ) Then
      Dim Component219 As VB#TextBox = Cast(Component, VB#TextBox)
      Component219.ResizeTriggerInit(Me.Width, Me.Height)
   ElseIf ( Component.getClass.getSuperclass.getName.equals("VB.ToggleButton") ) Then
      Dim Component220 As VB#ToggleButton = Cast(Component, VB#ToggleButton)
      Component220.ResizeTriggerInit(Me.Width, Me.Height)
   ElseIf ( Component.getClass.getSuperclass.getName.equals("VB.TreeView") ) Then
      Dim Component221 As VB#TreeView = Cast(Component, VB#TreeView)
      Component221.ResizeTriggerInit(Me.Width, Me.Height)
   ElseIf ( Component.getClass.getSuperclass.getName.equals("VB.DirListBox") ) Then
      Dim Component222 As VB#DirListBox = Cast(Component, VB#DirListBox)
      Component222.ResizeTriggerInit(Me.Width, Me.Height)
   ElseIf ( Component.getClass.getSuperclass.getName.equals("VB.FileListBox") ) Then
      Dim Component223 As VB#FileListBox = Cast(Component, VB#FileListBox)
      Component223.ResizeTriggerInit(Me.Width, Me.Height)
   ElseIf ( Component.getClass.getSuperclass.getSuperclass.getName.equals("VB.Usercontrol") ) Then
      Dim Component224 As VB#Usercontrol = Cast(Component, VB#Usercontrol)
      Component224.ResizeTriggerInit(Me.Width, Me.Height)
   End If

   If (myContent = Nothing) Then
      Call Base.getContentPane().add(Component)
   Else
      Call myContent.Add(Component)
   End If
End Sub

Public Sub Class_Initialize()
   myContent.BorderStyle = fmBorderStyleNone
   'Call Base.setContentPane(myContent)
   Base.getContentPane.add myContent
   myContent.Visible = True
End Sub

' ******************************** REDIRECT EVENTS ********************************
Public Sub Form_Unload(cancel As Integer)    'cancel is not used, is only for compatibility
End Sub

Public Sub Form_Activate()
End Sub
Public Sub Form_Deactivate()
End Sub
Public Sub Form_GotFocus()
End Sub
Public Sub Form_LostFocus()
End Sub
Public Sub Form_Load()
End Sub
Public Sub Form_Resize()
End Sub
Public Sub Form_Move()
End Sub
Public Sub Form_MenuClick(MenuItem As IMenuItem)
End Sub
Public Sub Form_ToolBarClick(ToolBarItem As IToolBarItem)
End Sub
Public Sub Form_Click()
End Sub
Public Sub Form_DblClick()
End Sub
Public Sub Form_KeyDown(KeyCode As Integer, Shift As Integer)
End Sub
Public Sub Form_KeyPress(KeyAscii As Integer)
End Sub
Public Sub Form_KeyUp(KeyCode As Integer, Shift As Integer)
End Sub
Public Sub Form_MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
End Sub
Public Sub Form_MouseMove(Button As Integer, Shift As Integer, X As Single, Y As Single)
End Sub
Public Sub Form_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
End Sub
Public Sub Form_Paint(g As java#awt#Graphics)
End Sub

Public Sub myContent_MouseUp(Button As Integer, Shift As Integer, X As Single, Y As Single)
   Call Me.Form_MouseUp(Button, Shift, X, Y)
End Sub
Public Sub myContent_MouseMove(Button As Integer, Shift As Integer, X As Single, Y As Single)
   Call Me.Form_MouseMove(Button, Shift, X, Y)
End Sub
Public Sub myContent_MouseDown(Button As Integer, Shift As Integer, X As Single, Y As Single)
   Call Me.Form_MouseDown(Button, Shift, X, Y)
End Sub
Public Sub myContent_Click()
   Call Me.Form_Click()
End Sub
Public Sub myContent_DblClick()
   Call Me.Form_DblClick()
End Sub
Public Sub myContent_KeyDown(KeyCode As Integer, Shift As Integer)
   Call Me.Form_KeyDown(KeyCode, Shift)
End Sub
Public Sub myContent_KeyPress(KeyAscii As Integer)
   Call Me.Form_KeyPress(KeyAscii)
End Sub
Public Sub myContent_KeyUp(KeyCode As Integer, Shift As Integer)
   Call Me.Form_KeyUp(KeyCode, Shift)
End Sub
Public Sub myContent_Paint(g As java#awt#Graphics)
   Call Me.Form_Paint(g)
End Sub

' ******************************** CONTENTFRAME PROPERTYS ********************************

'Public Property Get AlwaysOnTop() As Boolean ' DISABLED => 1.4 COMPATIBLE
'   AlwaysOnTop = Parent.isAlwaysOnTop 
'End Property

'Public Property Let AlwaysOnTop(v As Boolean)
'   Parent.setAlwaysOnTop v
'End Property

'Public Sub Show(Modal As FormShowConstants)
'   If Modal = vbModeless Then
'      Call Base.Show()      
'   Else
'   
'      Dim myDialog As New javax#swing#JDialog() 
'      Call myDialog.setModal(True) 
'      Call myDialog.setSize(Base.Parent.getSize())
'      Call myDialog.setMinimumSize(Base.Parent.getMinimumSize())
'      Call myDialog.setLocation(Base.Parent.getLocation())
'      Call myDialog.setContentPane(Base.getContentPane())
'      Call myDialog.setTitle(Me.Caption)
'      
'   End If
'End Sub

Public Property Get Transparency() As Integer 
   Transparency = myContent.Transparency
End Property

Public Property Let Transparency(v As Integer)
   myContent.Transparency = v
End Property

Public Property Get AntiAliasing() As Boolean
   AntiAliasing = myContent.AntiAliasing
End Property

Public Property Let AntiAliasing(v As Boolean)
   myContent.AntiAliasing = v
End Property

Public Property Get AutoRedraw() As Boolean
   AutoRedraw = myContent.AutoRedraw
End Property

Public Property Let AutoRedraw(v As Boolean)
   myContent.AutoRedraw = v
End Property

Public Property Get Picture() As #IResource
    Picture = myContent.Picture
End Property

Public Property Let Picture(Path As #IResource)
   myContent.Picture = Path
End Property

Public Property Get DrawWidth() As Integer 
   Transparency = myContent.DrawWidth
End Property

Public Property Let DrawWidth(v As Integer)
   myContent.DrawWidth = v
End Property

Public Sub PSet(x As Single, y As Single)
   myContent.PSet x, y
End Sub

Public Sub PSet(x As Single, y As Single, col As Long)
   myContent.PSet x, y, col
End Sub

Public Sub Line(x As Single, y As Single)
   myContent.Line x, y
End Sub

Public Sub Line(x1 As Single, y1 As Single, x2 As Single, y2 As Single)
   myContent.Line x1, y1, x2, y2
End Sub

Public Sub Line(x1 As Single, y1 As Single, x2 As Single, y2 As Single, Rect As Boolean)
   myContent.Line x1, y1, x2, y2, Rect
End Sub

Public Sub Line(x1 As Single, y1 As Single, x2 As Single, y2 As Single, Rect As Boolean, FillColor As Long)
   myContent.Line x1, y1, x2, y2, Rect, FillColor
End Sub

Public Sub Circle(x As Single, y As Single, radius As Single)
   Call myContent.Circle(x, y, radius)
End Sub

Public Sub Circle(x As Single, y As Single, radius As Single, color As Long)
   Call myContent.Circle(x, y, radius, color)
End Sub

Public Sub Circle(x As Single, y As Single, radius As Single, color As Long, startAngle As Single, endAngle As Single, Optional aspect As Single=1, Optional FillColor As Long=-1)
   Call myContent.Circle(x, y, radius, color, startAngle, endAngle, aspect, FillColor)
End Sub

Public Sub PaintPicture(refImage As Image, x As Single, y As Single)
   myContent.PaintPicture refImage, x, y
End Sub

Public Sub Print(text As String)
   'Call myContent.Print(text) 
   CurrentY = CurrentY + FontSize * 1.75
   Call Print(text, CurrentX, CurrentY)
End Sub

Public Sub Print(text As String, x1 As Single, y1 As Single)
   myContent.Print text, x1, y1
End Sub

Public Sub Cls() 
   myContent.Cls
End Sub

Public Property Get Image() As Image
   Image = myContent.Image
End Property

Public Property Get ImageBuffer() As BufferedImage
   ImageBuffer = myContent.ImageBuffer
End Property

Public Property Get Point(x As Single, y As Single) As Long 
   Point = myContent.Point(x, y)
End Property

Public Function TextWidth(text As String) As Integer
   TextWidth = myContent.TextWidth(text)
End Function

Public Function TextHeight(text As String) As Integer
   TextHeight = myContent.TextHeight(text)
End Function

Public Property Get CurrentX() As Long
   CurrentX = myContent.CurrentX
End Property

Public Property Let CurrentX(v As Long)
   myContent.CurrentX = v
End Property

Public Property Get CurrentY() As Long
   CurrentY = myContent.CurrentY
End Property

Public Property Let CurrentY(v As Long)
   myContent.CurrentY = v
End Property

Public Property Get ScaleLeft() As Single
   ScaleLeft = myContent.Left
End Property

Public Property Get ScaleTop() As Single
   ScaleTop = myContent.Top
End Property

Public Property Get ScaleWidth() As Single
   ScaleWidth = myContent.Width
End Property

Public Property Get ScaleHeight() As Single
   ScaleHeight = myContent.Height
End Property

Public Function getBackground() As Color
   If myContent = Nothing Then
      getBackground = Base.getBackground()
   Else
      getBackground = myContent.Parent.getBackground()
   End If
End Function

Public Function getForeground() As Color
   If myContent = Nothing Then
      getForeground = Base.getForeground()
   Else
      getForeground = myContent.Parent.getForeground()
   End If
End Function

Public Property Get BackColor() As Long
   BackColor = myContent.BackColor
End Property

Public Property Let BackColor(v As Long)
   myContent.BackColor = v
End Property

Public Property Get ForeColor() As Long
   ForeColor = MyContent.ForeColor 
End Property

Public Property Let ForeColor(v As Long)
   MyContent.ForeColor = v
End Property

' ******************************** FONT PROPERTYS ********************************

Public Property Get FontName() As String 
   FontName = myContent.FontName 
End Property

Public Property Let FontName(val As String)
   myContent.FontName = val
End Property

Public Property Get FontBold() As Boolean 
   FontBold = myContent.FontBold
End Property

Public Property Let FontBold(val As Boolean)
   myContent.FontBold = val
End Property

Public Property Get FontItalic() As Boolean
   FontItalic = myContent.FontItalic
End Property

Public Property Let FontItalic(val As Boolean)
   myContent.FontItalic = val
End Property

Public Property Get FontSize() As Integer 
   FontSize = myContent.FontSize
End Property

Public Property Let FontSize(val As Integer)
   myContent.FontSize = val
End Property

Public Property Get Font() As Font
   Font = myContent.getFont()
End Property

Public Property Get ContentFrame() As PictureBox
   ContentFrame = myContent
End Property
]]></Source><Param Name="(Name)" Value="Form"/><Param Name="(SuperClass)" Value="VB/AbstractForm"/><Param Name="(Type)" Value="Class"/><Param Name="(Access)" Value="Public"/><Param Name="(NameSpace)" Value="VB"/></SourceFile>
